#!/usr/bin/env python3

# $PKI_SCRIPT_REALM
# Contains the name of the current PKI realm, set in item.name parameter.
# $PKI_SCRIPT_FQDN
# Contains Fully Qualified Domain Name used as the default domain if the realm does not specify one in it's name.
# $PKI_SCRIPT_SUBJECT
# Contains the Distinguished Name, or subject of the certificate, each element separated by the / character, similar to the format of the openssl req -subj option.
# $PKI_SCRIPT_DOMAINS
# List of apex (root) domains configured for the realm, separated by the / character.
# $PKI_SCRIPT_SUBDOMAINS
# List of subdomains which should be added to each apex domain, each one separated by the / character. The special _wildcard_ name means a wildcard subdomain (*.example.com).
# $PKI_SCRIPT_PRIVATE_KEY
# Absolute path to the private key of the current PKI realm.
# $PKI_SCRIPT_DEFAULT_CRT
# Absolute path to the current PKI realm certificate chain, expected to be used in the application configuration files.
# $PKI_SCRIPT_DEFAULT_KEY
# Absolute path to the current PKI realm private key, expected to be used in the application configuration files.
# $PKI_SCRIPT_DEFAULT_PEM
# Absolute path to the current PKI realm combined private key and certificate chain, expected to be used in the application configuration files.
# $PKI_SCRIPT_STATE
# A list of PKI realm states separated by the , character. You can inspect this variable to determine the current state of the current realm (initialization, activation of new certificates, changed files) and react to it in the script.

import os
import sys
import json
import hvac

VAULT_ROLE='server_certs'
VAULT_CERT_TTL='1d'
VAULT_MOUNT_POINT='pki_int'

# return a unique list of values from delimitedString
def getDelimitedValues(delimitedString):
   d = dict ()
   domain_list = []

   domain_list = delimitedString.split('/')
   l = len(domain_list)
   for i in range(l) :
      d[domain_list[i]] = 1

   return [*d] # returns a list containing the keys

# build the list of domains without duplicates
# each domain will be joined with each subdomain
def buildDNSEntries(domains, subdomains):
   dnsEntries = dict ()

   for domain in domains:
      for subdomain in subdomains:
         if subdomain == '_wildcard_':
            dnsEntry='*.' + domain
         else:
            dnsEntry=subdomain + '.' + domain

         dnsEntries[dnsEntry] = 1

   return [*dnsEntries]

# process fields that are multi-valued '/' separated
subjects = getDelimitedValues(os.environ['PKI_SCRIPT_SUBJECT'])
domains = getDelimitedValues(os.environ['PKI_SCRIPT_DOMAINS'])
subdomains = getDelimitedValues(os.environ['PKI_SCRIPT_SUBDOMAINS'])

certDNSvalues = buildDNSEntries(domains, subdomains)



print('create certificate')
print('name: ' + VAULT_ROLE)  # This is the PKI secret role that sets the policy
print('common_name: ' + ", ".join(subjects))

# If DNS names where specified
if len(certDNSvalues) > 1:
   print('alt_names: ' + ", ".join(certDNSvalues))

print('ttl: ' + VAULT_CERT_TTL)
print('format: pem')
print('private_key_format: pem')

client = hvac.Client(
    url='http://127.0.0.1:8200',
    token='dev-only-token',
)

if client.is_authenticated() == False:
   print ('Failed to authenticate - exiting')
   sys._exit()

cert_dict = dict()

if len(certDNSvalues) > 1:
   cert_dict['alt_names'] = ", ".join(certDNSvalues)
cert_dict['format'] = 'pem'
cert_dict['private_key_format'] = 'pem'
cert_dict['ttl'] = VAULT_CERT_TTL

cert_response = generate_certificate_response = client.secrets.pki.generate_certificate(
   name=VAULT_ROLE,
   mount_point=VAULT_MOUNT_POINT,
   common_name=", ".join(subjects),
   extra_params=cert_dict
   )

print("certificate: {} ".format(cert_response))